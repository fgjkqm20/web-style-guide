import{_ as t,c as e,o as a,R as o}from"./chunks/framework.kkHJ_Qlh.js";const q=JSON.parse('{"title":"Section 4 디자인 평가","description":"","frontmatter":{},"headers":[],"relativePath":"contents/part/2/chapter/2/section/4.md","filePath":"contents/part/2/chapter/2/section/4.md"}'),r={name:"contents/part/2/chapter/2/section/4.md"},n=o('<h1 id="section-4-디자인-평가" tabindex="-1">Section 4 디자인 평가 <a class="header-anchor" href="#section-4-디자인-평가" aria-label="Permalink to &quot;Section 4 디자인 평가&quot;">​</a></h1><p>디자인 단계는 모형을 만들기 위해 디자인을 개념화하는 반복적인 단계이며, 그런 다음 최종 디자인과 완성된 웹 사이트에 도달하기 전에 종종 반복적으로 평가하고 개선합니다. 디자인 단계에서 사용자와 협의하면 사용자 목표와 행동에 매핑되는 형태로 콘텐츠와 기능을 제시하고 성공적이고 즐거운 사용자 경험을 제공하는 디자인에 집중할 수 있습니다 .</p><h2 id="_1-와이어프레임" tabindex="-1">1. 와이어프레임 <a class="header-anchor" href="#_1-와이어프레임" aria-label="Permalink to &quot;1. 와이어프레임&quot;">​</a></h2><p>와이어프레임은 반복 설계를 위한 저비용의 매우 효과적인 지원을 제공합니다. 와이어프레임은 생성하기 쉽고, 무엇보다 변경하기 쉽습니다. 코딩된 웹 사이트나 웹 애플리케이션보다 훨씬 쉽습니다. 와이어프레임 단계에서는 개념적인 화면 디자인과 작업 흐름을 제공해야 하며, 테스트를 통해 견고한 인터페이스와 작업 흐름으로 발전하여 프로그래머에게 전달되어야 합니다.</p><p>와이어프레임을 만들고 테스트하는 데 충분한 시간을 투자하세요. 유연성 덕분에 잘못 구상되고 비효율적인 디자인에 대한 최선의 방어책이 됩니다. 웹 사이트나 애플리케이션을 개발 단계로 옮기면 사용자 인터페이스와 작업 흐름에 대한 변경 비용이 더 많이 들고 따라서 구현 가능성이 낮아집니다.</p><p>초기 와이어프레임은 사용자 인터페이스와 작업 흐름을 개념화하는 데 도움이 되도록 종이나 화이트보드에 그린 간단한 스케치일 수 있습니다. 종이 프로토타입은 진화하는 디자인에 대한 사용자 피드백을 수집할 수 있는 저렴한 방법을 제공합니다. 종이 프로토타입은 일반적으로 사이트 탐색, 검색, 콘텐츠 등 페이지 요소의 위치를 보여주고 이러한 요소에 사용될 라벨을 포함합니다. 이러한 저해상도 모형은 페이지 구성과 탐색 레이블이 사용하고 이해하기 쉬운지 확인하기 위한 사용자 조사에 사용될 수 있습니다. 소규모 프로젝트의 경우 프로젝트를 개념 단계에서 개발 단계로 이동하는 데 충분할 수 있습니다. 그러나 대부분의 프로젝트는 스케치에서 Adobe Illustrator, Visio 또는 OmniGraffle과 같은 소프트웨어를 사용하여 만든 다이어그램으로 이동합니다. 이러한 와이어프레임은 수정하기 쉽고 설계 팀 간에 공유 및 배포하기 쉽기 때문에 설계 주기가 많은 복잡한 프로젝트에 가장 적합합니다(그림 4.23 참조).</p><h2 id="_2-프로토타입" tabindex="-1">2. 프로토타입 <a class="header-anchor" href="#_2-프로토타입" aria-label="Permalink to &quot;2. 프로토타입&quot;">​</a></h2><p>프로토타입은 작동하는 애플리케이션을 시뮬레이션하는 데 사용되는 와이어프레임 세트입니다. 프로토타입은 애플리케이션의 목적, 흐름, 상호 작용 패턴을 모델링합니다. 이 모델을 사용하면 사용자에게 작업을 안내하고 혼란스러운 점이나 어려움을 식별하는 환경을 만들 수 있습니다. 그런 다음 새로운 와이어프레임을 생성하여 문제를 해결하고 프로토타입을 계속해서 테스트할 수 있습니다.</p><p>종이 프로토타입은 각각 자체 페이지(또는 인덱스 카드)에 있는 일련의 와이어프레임으로 구성되며 애플리케이션의 흐름을 개념화하는 데 사용할 수 있습니다. 종이 프로토타입은 화면을 구축하거나 코드를 작성하기 전, 디자인 프로세스 초기에 사용성 테스트에 사용할 수 있습니다. 종이 프로토타입을 테스트하려면 애플리케이션의 첫 번째 화면(예: 로그인 화면)을 사용자 앞에 배치하고 피드백을 요청하세요. 어떤 조치를 취하시겠습니까? 그런 다음 첫 번째 화면을 사용자 작업의 결과로 나타나는 화면으로 바꾸고 상호 작용의 다양한 단계를 계속 진행합니다. 계속해서 피드백을 요청하고 세션이 끝난 후 추가 피드백과 제안을 수집하는 시간을 가지세요.</p><p>&quot;기능적&quot; 프로토타입은 대략적인 스케치와 완전히 설계된 웹 애플리케이션 사이의 중간 단계를 제공하며 프로젝트의 개념 단계에서 설계 단계로 이동하기 위한 프레임워크를 제공할 수 있습니다. html 와이어프레임은 별도의 웹 페이지에 표시되는 애플리케이션의 필수 요소와 함께 이 고품질 프로토타입의 기초를 형성합니다. 애플리케이션의 &quot;기능적&quot; 기능은 페이지 간의 기본 링크를 사용하여 시뮬레이션되므로 사용자는 애플리케이션의 흐름을 경험하고 이에 응답할 수 있습니다. html 프로토타입은 사용자 피드백에 따라 개선된 후 다시 테스트되고 더욱 개선될 수 있습니다. 기능과 백엔드 시스템이 완전히 개발되고 테스트되면 시각적 디자인과 웹 사이트 인터페이스를 와이어프레임에 &quot;부어&quot; 완성된 디자인을 생성할 수 있습니다.</p><p>기능적 와이어프레임은 종이 프로토타입과 동일한 미니멀리스트 디자인을 사용하지만 기능적 웹 사이트에서는 사용됩니다. 종이 프로토타입보다 개발하는 데 시간이 더 걸리지만 노력할 가치가 충분히 있으며, 특히 복잡한 정보 아키텍처를 기반으로 구축된 사이트와 높은 수준의 상호 작용이 포함된 웹 응용 프로그램의 경우 더욱 그렇습니다. 기능적 와이어프레임의 경우 사이트의 아키텍처, 탐색 및 기능을 모델링하기 위해 웹 사이트의 여러 계층이 설정됩니다. 웹 애플리케이션과 같은 대화형 사이트의 경우 와이어프레임에는 사용자와 함께 애플리케이션 흐름을 실행하고 테스트하기 위한 기본 사용자 인터페이스가 포함되어야 합니다.</p><p>사용자 조사 활동에 콘텐츠를 포함하세요. 예를 들어, &quot;lorem ipsum&quot; 더미 텍스트 대신 와이어프레임과 프로토타입에 실제 콘텐츠를 사용하세요. 와이어프레임이나 프로토타입 에 대한 피드백을 찾을 때 사용자에게 &quot;이 콘텐츠에 대한 작가의 목표는 무엇입니까?&quot;와 같이 콘텐츠에 대해 질문하십시오. 이 콘텐츠의 타겟층은 누구라고 생각하시나요? 사용자가 이 콘텐츠를 읽은 후 무엇을 하기를 기대하시나요?”</p><h2 id="_3-사용성-테스트" tabindex="-1">3. 사용성 테스트 <a class="header-anchor" href="#_3-사용성-테스트" aria-label="Permalink to &quot;3. 사용성 테스트&quot;">​</a></h2><p>사용성 테스트는 디자인 작업 시 사용자 행동을 통제되고 지시적으로 관찰하는 것입니다. 사용성 테스트는 디자인 프로세스 전반에 걸쳐 사용자가 작업을 수행하는 데 얼마나 잘 작동하는지, 얼마나 제대로 작동하는지 관찰하여 다양한 디자인 접근 방식을 평가하는 데 사용됩니다.</p><p>일반적인 사용성 테스트 세션에는 테스터와 대상 고객을 대표하는 참가자가 있습니다. 사용자에게는 디자인의 특정 요소를 테스트하고 접근 방식의 단점을 밝히기 위한 일련의 작업이 할당됩니다. 세션 중에 사용자는 테스터가 자신의 선택에 대한 근거를 이해할 수 있도록 큰 소리로 생각하도록 요청받습니다. 세션은 일반적으로 사용자에게 시스템에 대한 자신의 경험을 보다 광범위하게 논의하고 시스템 개선 방법에 대한 통찰력과 제안을 제공할 수 있는 기회가 제공되는 개방형 인터뷰로 끝납니다.</p><p>사용성 테스트는 사용성 문제를 식별하기 위한 설계 프로세스 전반에 걸쳐 중요합니다. 사용성 테스트를 통해 얻은 교훈은 디자인을 개선하고, 사용성을 개선하며, 사람들이 콘텐츠를 찾고 활용할 수 있도록 보장하는 데 사용될 수 있습니다.</p><p>접근성과 마찬가지로 많은 개발 팀은 사용성 테스트를 프로젝트가 끝날 때까지 미루거나, 더 나쁜 경우에는 사용성 테스트를 위한 시간과 리소스에 대한 예산을 책정하지 않고, 장애가 있는 사용자와 관련된 사용성 테스트는 더욱 적습니다. 사용성 테스트에 대한 관성은 &quot;실제&quot; 사용성 테스트가 복잡하고 시간이 많이 걸리며 사용성 랩, 고가의 장비, 많은 참가자 및 방탄 테스트 설계를 포함해야 한다는 오해에서 비롯된 것으로 보입니다. 실험실과 자원, 훈련된 연구원은 확실히 유리하지만, 이것이 부족하다고 해서 사용성 테스트를 하지 않을 이유가 없습니다. 한 명의 참가자가 참여하는 비공식 사용성 테스트를 통해 얻을 수 있는 이점은 전혀 사용성 테스트를 수행하지 않는 것보다 기하급수적으로 더 큽니다.</p><p>Steve Krug는 자신의 저서 _Don&#39;t Make Me Think_에서 &quot;시간과 돈이 없을 때 직접 테스트하는&quot; DIY 사용성 테스트를 장려하고 있으며 그의 저서 Rocket Surgery Made Easy에서 자세히 설명합니다. 그것을하는 방법. 그의 접근 방식은 소수의 사람들이 참여하는 짧지만 빈번한 세션을 장려합니다. 한 달에 하루 아침에 3명의 참가자가 참여하고 이어서 보고 세션을 통해 무엇을 고칠지 결정합니다.</p>',18),p=[n];function c(i,s,_,h,l,u){return a(),e("div",null,p)}const m=t(r,[["render",c]]);export{q as __pageData,m as default};
