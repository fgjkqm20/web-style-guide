import{_ as t,c as e,o as a,R as o}from"./chunks/framework.kkHJ_Qlh.js";const f=JSON.parse('{"title":"Section 4 명확한 링크 제시","description":"","frontmatter":{},"headers":[],"relativePath":"contents/part/10/chapter/2/section/4.md","filePath":"contents/part/10/chapter/2/section/4.md"}'),n={name:"contents/part/10/chapter/2/section/4.md"},r=o('<h1 id="section-4-명확한-링크-제시" tabindex="-1">Section 4 명확한 링크 제시 <a class="header-anchor" href="#section-4-명확한-링크-제시" aria-label="Permalink to &quot;Section 4 명확한 링크 제시&quot;">​</a></h1><p>포함된 하이퍼텍스트 링크는 두 가지 근본적인 디자인 문제를 야기합니다. 사용자가 사이트를 떠나도록 유도하여 사이트 콘텐츠의 흐름을 방해합니다. 또한 사용자가 새 페이지에 대한 포함된 링크를 따라갈 때, 특히 해당 새 페이지가 사이트 외부에 있는 경우 서문이나 설명 없이 사용자를 익숙하지 않은 영역으로 몰아넣어 정보의 맥락을 근본적으로 변경할 수 있습니다.</p><p>페이지에 링크를 배치할 때 텍스트 본문 내에 가장 눈에 띄는 링크만 배치하고 모든 보조 링크, 설명 링크, 괄호 링크 또는 각주 링크는 사용 가능하지만 방해가 되지 않는 문서 하단에 그룹화합니다.</p><h2 id="_1-밑줄" tabindex="-1">1. 밑줄 <a class="header-anchor" href="#_1-밑줄" aria-label="Permalink to &quot;1. 밑줄&quot;">​</a></h2><p>밑줄은 손글씨와 타자기 시절부터 이어져 왔으며, 그 당시에는 제목, 강조된 단어 또는 구와 같은 요소를 구별하는 방법으로 볼드체 및 이탤릭체와 같은 옵션을 쉽게 사용할 수 없었습니다. 인쇄상 밑줄은 글자의 가독성을 방해하므로 바람직하지 않습니다. 그러나 링크 밑줄은 색상을 볼 수 없는 사용자, 즉 색각 문제가 있는 사용자와 색상을 표시하지 않는 장치에서 웹에 액세스하는 사용자가 링크를 다른 텍스트와 구별할 수 있도록 보장합니다. 보편적인 사용성을 위해 링크는 색상 여부에 관계없이 시각적으로 식별 가능해야 합니다. 탐색 열이나 버튼 모음 내에 표시되는 링크는 명확한 링크이므로 반드시 밑줄을 긋을 필요는 없습니다. 그러나 본문 텍스트 내에 나타나는 링크는 주변 텍스트와 구분되도록 밑줄을 그어야 합니다.</p><h2 id="_2-방문한-링크와-방문하지-않은-링크" tabindex="-1">2. 방문한 링크와 방문하지 않은 링크 <a class="header-anchor" href="#_2-방문한-링크와-방문하지-않은-링크" aria-label="Permalink to &quot;2. 방문한 링크와 방문하지 않은 링크&quot;">​</a></h2><p>대부분의 웹 세션에는 시행착오가 수반됩니다. 예를 들어, 전화번호나 가격, 위치를 찾으려면 여러 차례 검색하고 비생산적인 경로를 따라야 할 수 있습니다. 성과가 입증되지 않은 페이지를 반복적으로 방문하여 이미 어디를 봤는지 알 수 있는 방법이 없으면 프로세스가 우회될 수 있습니다. 방문한 링크와 방문하지 않은 링크에 대해 서로 다른 링크 색상을 제공함으로써 사용자가 이미 선택한 경로를 식별할 수 있습니다.</p>',7),c=[r];function s(i,_,p,h,d,l){return a(),e("div",null,c)}const u=t(n,[["render",s]]);export{f as __pageData,u as default};
