import{_ as i,o as s,c as a,R as t}from"./chunks/framework.JgfdjA-K.js";const _=JSON.parse('{"title":"Section 1 액체 레이아웃 및 비례 측정 기반 구축","description":"","frontmatter":{},"headers":[],"relativePath":"contents/part/6/chapter/2/section/1.md","filePath":"contents/part/6/chapter/2/section/1.md"}'),e={name:"contents/part/6/chapter/2/section/1.md"},n=t(`<h1 id="section-1-액체-레이아웃-및-비례-측정-기반-구축" tabindex="-1">Section 1 액체 레이아웃 및 비례 측정 기반 구축 <a class="header-anchor" href="#section-1-액체-레이아웃-및-비례-측정-기반-구축" aria-label="Permalink to &quot;Section 1 액체 레이아웃 및 비례 측정 기반 구축&quot;">​</a></h1><p>많은 웹 디자이너들은 오랫동안 &quot;유동적&quot; 레이아웃, 즉 고정된 너비로 설정되는 대신 브라우저 창의 너비에 따라 확장되거나 축소되는 웹 페이지 디자인을 옹호해 왔습니다. 고정 너비 레이아웃은 몇 년 전까지만 해도 웹 디자인의 가장 인기 있는 형태였으며 특히 게슈탈트 시각적 디자인 관계(8장 그래픽 디자인 참조)가 정보를 이해하는 데 도움이 되는 복잡한 페이지 레이아웃에서 많은 장점을 가지고 있습니다. 그 페이지. 그러나 고정된 웹 페이지 레이아웃에는 많은 단점도 있습니다. 큰 디자인(데스크톱 화면의 경우) 또는 작은 디자인(모바일 화면의 경우)이 고정되어 있으며 화면 크기가 손목시계에서 거대한 크기에 이르기까지 다양한 웹 세계에 쉽게 적응할 수 없습니다. 회의실 모니터. 반응형 디자인은 모든 크기의 화면에 적응할 수 있는 수단과 고정 레이아웃에서 벗어날 때 손실된 디자인 제어의 일부를 복구하는 방법을 모두 제공합니다.</p><p>반응형 레이아웃 디자인은 고정된 픽셀 너비 대신 비례 비율 측정 세트를 기반으로 하는 유동적 레이아웃 그리드로 시작됩니다. 열, 거터, 테두리 영역 및 기타 공간(다중 열 레이아웃)은 브라우저 창 너비의 백분율로 지정되며 전체 디자인은 사용 가능한 공간에 &quot;유동적으로&quot; 적응하기 위해 필요에 따라 확장되거나 축소됩니다. 더욱 정교한 유동 레이아웃과 CSS 스타일 덕분에 em(또는 rem) 단위를 기반으로 하는 단일 기본 유형 크기에 타이포그래피가 비례하게 됩니다. 그러나 그림 6.3에서 볼 수 있듯이 순수 비례식 유동 레이아웃은 다양한 화면 크기의 문제를 완전히 해결하지 못합니다. 왜냐하면 작은 화면에서 width: 100%를 지정하면 작은 화면에서는 터무니없이 찌그러진 레이아웃이, 큰 화면에서는 터무니없이 늘어난 레이아웃이 나타나기 때문입니다. .</p><p>Em 기반 인쇄 크기(그림 6.6)는 다음 두 가지 이유로 중요합니다.</p><ul><li>사용자는 장치에서 활자가 너무 크거나 작은 경우 타이포그래피의 크기를 쉽고 보편적으로 조정할 수 있습니다. 이는 시각 장애가 있는 독자의 접근성을 위한 중요한 기능입니다.</li><li>상대 문자 크기는 일반적으로 <code>&lt;html&gt;</code> 또는 <code>&lt;body&gt;</code> 태그와 같은 전역 페이지 크기의 글꼴 크기 요소를 사용하여 CSS 제어 하에서 쉽게 크기를 조정할 수 있습니다. em 값의 크기를 조정하면 페이지의 모든 타이포그래피를 한 번에 확대하거나 축소할 수 있습니다. 이는 반응형 디자인에 유용한 기능으로 전체 화면 크기와 픽셀 밀도에 편안하게 일치하도록 페이지의 타이포그래피 크기를 빠르게 조정할 수 있습니다.</li></ul><h2 id="_1-비례-이미지-및-미디어" tabindex="-1">1. 비례 이미지 및 미디어 <a class="header-anchor" href="#_1-비례-이미지-및-미디어" aria-label="Permalink to &quot;1. 비례 이미지 및 미디어&quot;">​</a></h2><p>사진과 삽입된 비디오는 em 또는 화면 너비의 백분율 등 비례 단위로 크기를 조정할 수도 있습니다. 이 프로세스에는 편리한 CSS 코드가 도움이 됩니다. 이미지 또는 비디오 컨테이너의 CSS 스타일에 max-width: 100%를 지정하면 컨테이너 크기를 비례적으로 조정할 수 있고 컨테이너 내의 이미지가 항상 컨테이너를 채우지만(최대 너비의 100%) 너비를 초과하지 않도록 할 수 있습니다. 컨테이너의 크기. 따라서 페이지 레이아웃이 브라우저 창을 채우기 위해 유동적으로 변경될 뿐만 아니라 모든 이미지의 크기도 공간에 따라 유동적으로 변경됩니다.</p><p>요즘에는 화면 크기가 다양하므로 데스크톱 크기의 이미지를 휴대폰이나 태블릿과 같은 작은 화면 장치로 보내는 비효율성을 어떻게 피할 수 있습니까? 이미지 요소의 HTML5 소스 세트(<code>srcset</code>) 속성을 사용하거나 새로운 <code>&lt;picture&gt;</code> 요소를 사용하면 다양한 이미지 크기와 각 이미지에 적합한 최소 너비 크기를 제공할 수 있습니다. 휴대폰에는 작은 버전이 표시되고 데스크톱 화면에는 큰 버전이 표시됩니다.</p><p>지금까지는 훌륭했지만 순수한 유동적 레이아웃은 다양한 화면 크기 문제를 완전히 해결하지 못합니다. 왜냐하면 스마트폰의 비례적으로 축소된 레이아웃은 레이아웃 텍스트를 읽을 수 있는 크기로 확대하기 위해 많은 확대/축소 없이는 사용할 수 없기 때문입니다.</p><h2 id="_2-미디어-쿼리" tabindex="-1">2. 미디어 쿼리 <a class="header-anchor" href="#_2-미디어-쿼리" aria-label="Permalink to &quot;2. 미디어 쿼리&quot;">​</a></h2><p>CSS3에 도입된 미디어 쿼리는 반응형 디자인의 중요한 세 번째 부분을 형성합니다. 미디어 쿼리를 사용하면 사용자의 브라우저 창 또는 뷰포트 내에서 사용 가능한 공간에 가장 잘 맞도록 레이아웃, 타이포그래피 및 내장된 미디어를 맞춤 설정할 수 있습니다.</p><p>주로 웹 브라우저 디스플레이 너비를 조사하는 데 사용되지만 미디어 쿼리는 다음을 포함하여 사용자 디스플레이 장치의 특성에 대해 훨씬 더 많은 정보를 제공할 수 있습니다.</p><ul><li>오리엔테이션</li><li>종횡비</li><li>컬러 또는 흑백 디스플레이</li><li>해상도(dpi)</li><li>스캔(텔레비전 모니터의 경우 프로그레시브 또는 인터레이스 스캔)</li></ul><p>미디어 쿼리는 사용자 디스플레이 화면의 다양한 측면을 조건부로 테스트한 다음 해당 조건에 응답하고 가장 적절한 레이아웃, 타이포그래피 및 그래픽을 제공하는 스타일 시트를 선택적으로 로드하는 수단을 제공합니다. 특정 범위의 화면 크기에 대한 이러한 스타일 시트는 일반적으로 특정 최소 크기 또는 &quot;중단점&quot;에서 활성화되도록 설계된 CSS3 미디어 쿼리에 의해 트리거됩니다. <em>Guardian</em> 신문(<a href="http://theguardian.com/" target="_blank" rel="noreferrer">theguardian.com</a>) 또는 <em>Boston Globe</em>(<a href="http://bostonglobe.com" target="_blank" rel="noreferrer">bostonglobe.com</a>)와 같은 반응형 사이트에서 스타일 중단점을 쉽게 볼 수 있습니다. 데스크톱이나 노트북 컴퓨터에서 웹 브라우저 창의 너비를 점진적으로 줄이면 먼저 레이아웃이 프레임에 맞게 압축된 다음 최소로 설정된 &quot;중단점&quot;에 도달하면 갑자기 새로운 레이아웃 스타일로 이동하는 것을 볼 수 있습니다. 브라우저 창의 너비.</p><p>다음 미디어 쿼리는 뷰포트 너비가 1,200픽셀보다 큰 경우 기본 콘텐츠 영역(컨테이너)의 너비를 970픽셀로 설정합니다.</p><div class="language-CSS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">970</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>반응형 디자인은 단순히 페이지 레이아웃을 늘리거나 축소하는 것이 아니라 특정 범위의 화면 크기에 가장 최적화된 고유한 콘텐츠 레이아웃과 탐색을 제공하는 것입니다. 대부분의 반응형 디자인은 스마트폰, 태블릿, 대형 데스크톱 또는 노트북 화면의 뷰포트 너비 중단점에 맞춰진 최소 3개의 서로 다른 레이아웃 스타일 시트를 사용합니다. 여기에는 샘플 중단점 측정이 표시되어 있지만(그림 6.9) 디자인 중단점 위치를 지정하는 마법이나 보편적인 공식은 없습니다. 가장 중요한 요소는 청중이 사용할 다양한 장치에서 레이아웃, 콘텐츠 및 기능이 어떻게 보이는지입니다. 귀하의 고유한 사례와 요구 사항을 살펴보고 이에 따라 디자인 중단점을 설정하십시오.</p><p>반응형 디자인은 각 반응형 스타일 시트에서 사이트의 기본 탐색 링크 스타일을 다르게 지정하는 경우가 많습니다. 예를 들어 스마트폰용 소형 팝업 메뉴, 태블릿 화면용 소형 링크 레이아웃, 데스크톱 화면용 더 광범위하고 일반적인 레이아웃 등이 있습니다.</p><p>반응형 디자인은 대형 데스크탑 모니터와 노트북의 전체 화면에 맞게 확장되는 경우가 거의 없습니다. 터무니없이 넓은 페이지 디자인은 대부분의 레이아웃 구성을 망칠 수 있으며, 텍스트의 긴 줄 길이는 내용의 가독성을 떨어뜨립니다.</p>`,19),l=[n];function p(h,o,r,c,d,k){return s(),a("div",null,l)}const g=i(e,[["render",p]]);export{_ as __pageData,g as default};
