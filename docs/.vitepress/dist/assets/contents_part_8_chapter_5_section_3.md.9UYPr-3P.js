import{_ as a,c as e,o as t,R as o}from"./chunks/framework.kkHJ_Qlh.js";const _=JSON.parse('{"title":"Section 3 페이지 그리드 시스템 사용","description":"","frontmatter":{},"headers":[],"relativePath":"contents/part/8/chapter/5/section/3.md","filePath":"contents/part/8/chapter/5/section/3.md"}'),i={name:"contents/part/8/chapter/5/section/3.md"},r=o('<h1 id="section-3-페이지-그리드-시스템-사용" tabindex="-1">Section 3 페이지 그리드 시스템 사용 <a class="header-anchor" href="#section-3-페이지-그리드-시스템-사용" aria-label="Permalink to &quot;Section 3 페이지 그리드 시스템 사용&quot;">​</a></h1><p>페이지 그리드는 페이지 레이아웃에 일관되고 예측 가능한 구조를 제공하는 데 널리 사용되는 수단입니다. 인쇄용 기존 고정 페이지 그리드와는 달리, 가장 현대적인 웹 페이지 그리드는 작은 화면의 너비에 맞게 조정되지만 일반적으로 큰 화면의 경우 최대 너비(CSS max-width)를 지정하는 유동적이고 비례적인 간격의 그리드입니다. 그러나 그리드는 웹 페이지를 효율적으로 구성하기 위한 솔루션의 일부일 뿐입니다.</p><h2 id="_1-그리드-시스템의-기원" tabindex="-1">1. 그리드 시스템의 기원 <a class="header-anchor" href="#_1-그리드-시스템의-기원" aria-label="Permalink to &quot;1. 그리드 시스템의 기원&quot;">​</a></h2><p>페이지 그리드는 Josef Müller-Brockmann과 같은 1950년대 스위스 디자인 학교의 모더니스트와 가장 잘 연관되어 있지만 페이지 그리드는 수천 년 더 오래되었습니다. 신중하게 디자인된 모든 페이지는 그리드를 사용합니다. 가장 오래되고 가장 기본적인 레이아웃 그리드는 원고 그리드로, 활자가 발명되기 훨씬 전에 널리 사용되었으며 오늘날에도 책, 블로그, 스마트폰 레이아웃에서 여전히 널리 사용되고 있습니다. 고전적인 원고 격자(그림 8.23a)에는 단일 주요 열이 있지만 때로는 넓은 여백이 여백 메모나 괄호 자료에 사용될 수 있습니다. 기계 인쇄의 등장과 책의 보다 표준화된 형식으로 인해 원고 그리드에는 일반적으로 페이지 번호에 대한 간단한 바닥글뿐만 아니라 간단한 머리글이나 장 제목도 포함됩니다.</p><p>기둥 격자(그림 8.23b, c)는 요하네스 구텐베르크가 1452년경에 활자를 발명하기 전에 존재했으며, 1800년대 초반에는 신문과 초기 잡지에 가장 널리 사용되는 레이아웃이 되었습니다. 기둥 그리드는 목판화 또는 나중에 에칭 그래픽을 정기 간행물, 서적 및 초기 대량 유통 잡지에 도입하는 데 특히 유연했습니다. 오늘날 대부분의 인쇄 잡지, 광고 및 정보 제공 출판물, 브로셔, 웹 사이트는 일종의 다중 열 레이아웃을 사용합니다.</p><p>오늘날 1950년대와 1960년대 모더니즘 디자이너들에 의해 대중화된 모듈형 그리드(그림 8.23d)는 인쇄 및 웹 디자인에서 가장 잘 알려진 레이아웃 그리드입니다. 이러한 형태의 고정 레이아웃 그리드는 브라우저의 CSS 지원이 더욱 안정적이고 정교해지면서 2006~2011년 웹 디자인에서 잠깐 인기를 끌었습니다. 960 Grid(960.gs)와 같은 기성 프레임워크는 모바일 컴퓨팅의 급격한 증가로 인해 고정 너비 웹 그리드가 대부분의 용도에 적합하지 않게 되기 전에 짧은 인기를 누렸습니다. 반응형 웹 디자인이 성숙해짐에 따라 최소한 데스크탑 크기의 페이지 레이아웃에 대해 더 복잡한 모듈식 레이아웃 그리드로 돌아가는 것을 보게 될 것입니다.</p><p>계층형 그리드(그림 8.23e)는 현대 그리드 디자인의 좀 더 자유로운 형태로, 일반적으로 잡지 사진 스프레드나 웹사이트의 홈 페이지와 같이 매우 그래픽적인 인쇄나 웹 페이지와 같은 특별한 상황에 사용됩니다. 계층적 그리드에서는 하나 이상의 주요 그래픽 요소가 페이지 디자인을 고정하지만, 텍스트 요소는 일반적으로 기존의 단일 또는 다중 열 그리드로 설정됩니다.</p><h2 id="_2-최신-그리드-시스템" tabindex="-1">2. 최신 그리드 시스템 <a class="header-anchor" href="#_2-최신-그리드-시스템" aria-label="Permalink to &quot;2. 최신 그리드 시스템&quot;">​</a></h2><p>1920년대 독일의 바우하우스 학교는 형태, 색상, 인쇄 페이지의 레이아웃에 대한 형태 심리학의 이론과 현대주의 이론을 혼합했습니다. 초기 바우하우스 그래픽 디자이너들은 러시아 구성주의 예술가, 그래픽 디자이너, 건축가 엘 리시츠키(El Lissitzky)의 영향도 많이 받았습니다. 엘 리시츠키(El Lissitzky)의 대담한 기하학적 페이지 디자인과 포스터는 오늘날에도 여전히 디자이너들에게 영감을 줍니다. 1933년 바우하우스가 게슈타포에 의해 폐쇄된 후 많은 교수진이 스위스로 이주했습니다. 스위스 디자인은 바우하우스의 영향을 많이 받았지만 현대적인 레이아웃 그리드와 디자인 모듈성을 제공한 사람은 나중에 Jan Tschichold 및 Josef Müller-Brockmann과 같은 스위스 디자이너였습니다. 1950년대와 1960년대 Charles Eames와 Ray Eames, Paul Rand, Massimo Vignelli와 같은 모더니즘 디자이너들은 모더니스트 디자인을 미국 기업의 시그니처 룩으로 만들었습니다.</p><p>뮐러-브로크만(Müller-Brockmann)은 그리드 기반 디자인 시스템을 가장 명확하게 옹호한 사람이며, 그의 책인 그래픽 디자인의 <em>그리드 시스템(Grid Systems in Graphic Design)은</em> 인쇄 디자인의 그리드에 대한 확실한 모더니즘적 진술로 간주됩니다. 모더니스트 디자이너들은 인쇄 그래픽 디자인 프로젝트 전반에 걸쳐 그리드를 사용했지만 그리드는 책이나 잡지와 같은 복잡한 문서에 일관성과 합리성을 부여하는 특히 강력한 수단을 제공했습니다. 그리드는 콘텐츠 표시 및 배치를 위한 반복 가능한 시스템을 제공합니다.</p><p>그리드 시스템은 창의적인 레이아웃에 방해가 되는 것처럼 보일 수 있지만 적절하게 사용하면 그래픽 단조로움을 생성하지 않고 레이아웃에 일관된 구조를 가져올 수 있습니다(그림 8.24).</p><p>웹 진화의 첫 10년 동안은 실제 그리드 시스템이 실용적이지 않았습니다. 그 당시 &quot;웹 디자인&quot;은 단일 페이지 열의 최소 수준 이상을 생성하는 데 필요한 숨겨진 테이블과 투명한 gif 그래픽 스페이서로 주로 구성되었기 때문입니다. 2000년대 초반 CSS에 대한 브라우저 지원이 증가한 것은 주로 Jeffrey Zeldman 및 Web Standards Project와 같은 활동가 웹 디자이너의 노력에 기인합니다. 주요 브라우저. 표준 기반 디자인이 실용화되면서 CSS2 및 xHTML과 같은 웹 레이아웃 도구가 점점 더 정교해지면서 웹 디자이너들 사이에서 그리드 기반 레이아웃에 대한 관심이 다시 부각되었습니다.</p><p>960 Grid(960.gs)와 같은 그리드 기반 CSS 디자인 프레임워크는 고전적인 모더니즘 그리드 원칙을 사용하여 고정 너비 웹 템플릿 디자인을 구성하는 수단으로 인기를 얻었습니다. 모바일 컴퓨팅과 반응형 웹 디자인의 등장으로 고정 그리드 시스템은 더욱 유연하고 반응성이 높아지도록 진화했으며, 기존 그리드 시스템의 합리성과 모듈식 사고 방식은 이제 작은 화면의 보다 유동적인 디자인과 고전적인 고정 너비 디자인에 적용되었습니다. 화면 공간이 허용하는 그리드 레이아웃. 전 <em>New York Times</em> 디자인 디렉터 Khoi Vihn과 영국 웹 디자이너 Mark Boulton은 고정 구현과 반응 구현 모두에서 웹용 그리드 시스템에 대해 광범위하게 글을 썼습니다. CSS3 유연한 상자 레이아웃(줄여서 &quot;flexbox&quot;)이 브라우저에서 더욱 광범위하고 안정적으로 지원됨에 따라 점점 더 정교하고 유연하며 반응성이 뛰어난 그리드 프레임워크가 등장하는 것을 보게 될 것입니다.</p><p>2005년부터 2010년까지 잠시 동안 웹 페이지용 인쇄형 고정 폭 그리드 디자인이 인기를 끌었습니다. 당시 CSS2는 인쇄된 그리드를 생성할 만큼 정교해졌으며 모바일 사용자는 일반적으로 가장 기본적인 정보와 대화형 기능만 있는 매우 단순화된 &quot;모바일&quot; 사이트로 분류되었습니다. 여기에 표시된 <a href="www.960.gs">&quot;960&quot; 그리드</a>(그림 8.23)는 가장 널리 사용되는 웹 그리드 시스템 중 하나였으며 여전히 이전 고정 너비 사이트 디자인에서 볼 수 있습니다.</p><h2 id="_3-모듈-및-프로그램" tabindex="-1">3. 모듈 및 프로그램 <a class="header-anchor" href="#_3-모듈-및-프로그램" aria-label="Permalink to &quot;3. 모듈 및 프로그램&quot;">​</a></h2><p>1950~1960년대의 현대 디자인 운동은 그리드 레이아웃에 대한 헌신으로 유명하지만 그리드는 보다 포괄적인 디자인 프로그램의 구성 요소로 생성된 일관되고 반복 가능한 그래픽 디자인 형식 또는 모듈의 기준점일 뿐입니다. 현대 디자인의 모듈 및 프로그램 형태는 레이아웃과 타이포그래피에 대한 합리주의적 접근 방식의 핵심을 형성했습니다. 반복 디자인 모듈은 사전에 구상된 그래픽 하위 단위의 효과적인 라이브러리였으며, 이는 신중하게 프로그래밍된 디자인 시스템을 통해 복잡한 인쇄 디자인 프로그램을 더욱 효율적이고 비용 효율적이며 시각적으로 통합할 수 있었습니다.</p><p>그림 8.26의 예는 디자이너 Massimo Vignelli가 미국 국립공원관리청을 위한 시스템을 구상한 지 거의 50년이 지난 후에도 여전히 강력하게 진행되고 있는 모듈 및 프로그램 설계 시스템을 보여줍니다. 국립공원 지도 및 브로셔를 위한 Vignelli의 Unigrid 디자인 시스템은 아름답고 기능적이며, 디자인 시스템의 일관성과 예측 가능성으로 인해 공원 서비스는 프로그램 기간 동안 수백만 달러를 절약했습니다.</p><h2 id="_4-일관된-레이아웃" tabindex="-1">4. 일관된 레이아웃 <a class="header-anchor" href="#_4-일관된-레이아웃" aria-label="Permalink to &quot;4. 일관된 레이아웃&quot;">​</a></h2><p>텍스트와 그래픽을 처리하기 위한 레이아웃 그리드와 스타일을 설정한 다음 일관되게 적용하여 사이트 페이지 전체에 리듬과 통일성을 구축하세요. 반복은 지루하지 않습니다. 이는 귀하의 사이트에 &quot;장소&quot;에 대한 뚜렷한 감각을 생성 및 강화하고 귀하의 사이트를 기억에 남게 만드는 일관된 그래픽 아이덴티티를 제공합니다. 레이아웃 및 탐색에 대한 일관된 접근 방식을 통해 사용자는 디자인에 빠르게 적응하고 사이트 페이지 전반에 걸쳐 정보 및 탐색 컨트롤의 위치를 ​​자신있게 예측할 수 있습니다.</p><h2 id="_5-확립된-패턴" tabindex="-1">5. 확립된 패턴 <a class="header-anchor" href="#_5-확립된-패턴" aria-label="Permalink to &quot;5. 확립된 패턴&quot;">​</a></h2><p>오늘날 모더니스트 모듈 및 프로그램 디자인의 개념적 후손은 웹 &quot;패턴 라이브러리&quot;입니다. 이는 반복 가능한 콘텐츠와 기능적 디자인 모듈이 어떻게 보여야 하는지에 대한 정적인 시각적 예일 뿐만 아니라 &quot;라이브&quot; 자체 포함 HTML 및 웹 사이트에서 빠르게 재사용하고 사용자 정의할 수 있는 CSS 코드입니다.</p><p>웹 디자인 전문 용어에서 &quot;패턴&quot;은 버튼, 기본 입력 양식, 인용문 처리의 특징적인 방법, 블록 인용문과 같이 사이트에서 일반적으로 반복되는 개체 또는 HTML 태그를 설명하는 HTML 및 CSS 코드의 자체 포함 단위입니다. , HTML의 가장 기본적인 헤더, 목록, 표 및 기타 표준 요소에 대한 스타일도 있습니다. 디자이너들은 편의를 위해 그리고 웹 사이트 전체에서 일관적인 처리 방식을 지원하기 위해 항상 이러한 코드를 복사하여 붙여넣었습니다. 패턴 라이브러리는 웹 사이트의 반복되는 구성 요소 모음을 신중하게 유지 관리하는 것입니다. 패턴 라이브러리는 &quot;스타일 가이드&quot; 또는 &quot;프론트 엔드 스타일 가이드&quot;라고도 하지만 작업 HTML 및 CSS 코드를 기반으로 하는 패턴 라이브러리가 단순한 수집된 것보다 훨씬 강력하고 유용하기 때문에 &quot;패턴 라이브러리&quot;를 선호합니다. 시각적 스타일링의 예.</p><p>웹 사이트가 필요한 대부분의 엔터티에는 이미 사이트가 있으며, 웹 사이트가 수년에 걸쳐 노후화되고 개선됨에 따라 점차적으로 새 프로젝트의 CSS 코드가 축적됩니다. 새로운 기능과 스타일을 추가하는 가장 보수적인 방법은 단순히 이전 CSS 목록에 새로운 CSS 코드를 추가하는 것입니다. 이 추가 방법을 사용하면 오래된 것들이 깨지는 것을 방지할 수 있지만 점점 더 많은 스타일링 코드가 추가되면서 CSS가 사이트 성능에 지장을 줄 정도로 부풀어오르게 될 수 있습니다. 아마도 더 나쁜 것은 오래된 코드가 너무 복잡하고 뒤엉켜서 아무도 &quot;라이브&quot; 사이트에서 실제로 어떤 코드가 사용되었는지, 어떤 코드가 최신 스타일 프로젝트에서 중복되었는지 기억하지 못한다는 점입니다.</p><p>작동하고 테스트된 코드의 일관된 패턴 라이브러리를 유지하려면 약간의 노력이 필요하지만 다음과 같은 여러 가지 이점이 있습니다.</p><ul><li>견고하고 신뢰할 수 있는 코드 라이브러리는 새로운 기능이 잘라내어 붙여넣기 작업이 되므로 엄청난 시간을 절약할 수 있으며, 패턴 라이브러리에 이미 존재하는 객체와 기능을 재창조하는 데 시간을 낭비하는 사람이 없기 때문에 중복성을 줄일 수 있습니다.</li><li>단일 코드 저장소를 사용하면 사이트의 HTML과 CSS를 훨씬 쉽게 확인하고 유지 관리할 수 있습니다. 모든 패턴 예제를 하나의 긴 웹 페이지에 보관하는 경우 특히 그렇습니다. 테스트할 새 코드가 있는 경우 이를 패턴 라이브러리 페이지에 추가하고 새 코드가 이전 코드를 손상시키는지 또는 새 CSS, HTML, JavaScript 클래스 또는 변수 이름이 기존 사이트 코드와 충돌하는지 여부를 신속하게 평가할 수 있습니다. .</li><li>패턴 라이브러리는 디자이너, 프런트 엔드 개발자 및 팀의 모든 사람이 기존 스타일 및 기능에 대한 공통 참조 지점과 공유 어휘를 갖고 기능이 이미 존재하는지 확인하는 빠른 수단을 가지므로 강력한 커뮤니케이션 도구가 됩니다. 기존 코드에서 수정할 수 있습니다.</li><li>철저한 패턴 라이브러리는 (현재) 전혀 사용할 계획이 없는 태그를 포함하여 모든 그럴듯한 HTML 태그에 대해 호환 가능한 스타일을 지정합니다. <code>&lt;cite&gt;</code>또는 태그를 사용한 적이 없을 수도 <code>&lt;abbr&gt;</code>있지만 거의 사용되지 않는 HTML에 스타일을 지정하면 누군가가 사이트 내에서 해당 태그를 사용하는 경우 불쾌한 놀라움(추악한 브라우저 기본 스타일)을 방지할 수 있습니다.</li></ul>',25),n=[r];function l(s,c,p,h,d,u){return t(),e("div",null,n)}const q=a(i,[["render",l]]);export{_ as __pageData,q as default};
