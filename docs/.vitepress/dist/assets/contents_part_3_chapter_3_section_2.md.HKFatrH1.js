import{_ as t,c as o,o as i,R as l}from"./chunks/framework.kkHJ_Qlh.js";const d=JSON.parse('{"title":"Section 2 프로젝트 관리 방법 선택","description":"","frontmatter":{},"headers":[],"relativePath":"contents/part/3/chapter/3/section/2.md","filePath":"contents/part/3/chapter/3/section/2.md"}'),a={name:"contents/part/3/chapter/3/section/2.md"},e=l('<h1 id="section-2-프로젝트-관리-방법-선택" tabindex="-1">Section 2 프로젝트 관리 방법 선택 <a class="header-anchor" href="#section-2-프로젝트-관리-방법-선택" aria-label="Permalink to &quot;Section 2 프로젝트 관리 방법 선택&quot;">​</a></h1><p>모든 프로젝트 관리 기술은 위험을 관리하려는 시도입니다. 소프트웨어 및 웹 프로젝트 관리에 대한 현재 가장 인기 있는 두 가지 접근 방식(프로젝트 단계의 전통적인 &quot;폭포수&quot; 처리와 새로운 &quot;애자일&quot; 개발 기술의 반복 또는 &quot;스프린트&quot;)은 둘 다 프로젝트의 현재 상태에 대한 신뢰할 수 있는 정보를 제공하기 위한 것입니다. 프로젝트, 전반적인 우선순위, 각 단계에서 누가 무엇을 해야 하는지 추적, 그리고 프로젝트가 합의된 기능, 예산, 일정이라는 세 가지 목표를 달성하는 데 얼마나 근접했는지에 대한 정보입니다.</p><p>폭포수 기술과 애자일 기술은 완료할 작업과 제공할 기능을 생성하고 우선순위를 지정하는 방식에서 근본적으로 다릅니다. 두 기술 모두 사용자 요구 사항에 대한 신중한 조사가 필요합니다. 폭포수 기술은 궁극적으로 (이론적으로) 고정된 결과물 세트를 생성하는 데 필요한 시간과 비용에 대한 팀 추정에 의존합니다. 애자일 프레임워크에서는 팀과 제품 소유자가 최종 제품에 어떤 기능이 포함될지 정확히 추측하려고 하지 않습니다. 대신 그들은 사용자와 제품 소유자의 우선순위를 강조합니다. 현재 사용자가 작업해야 할 가장 중요한 것은 무엇입니까?</p><p>이 섹션에서는 프로젝트 관리에 대한 이 두 가지 접근 방식의 장단점을 요약하고 두 가지 장점을 결합한 세 번째 하이브리드 옵션을 제시합니다.</p><h2 id="_1-폭포수-프로젝트-관리" tabindex="-1">1. 폭포수 프로젝트 관리 <a class="header-anchor" href="#_1-폭포수-프로젝트-관리" aria-label="Permalink to &quot;1. 폭포수 프로젝트 관리&quot;">​</a></h2><p>1970년에 컴퓨터 과학자 Winston Royce는 프로세스를 일련의 단계로 설명하는 소프트웨어 프로젝트 관리에 대한 영향력 있는 기사를 썼습니다. 각 단계는 다음 단계가 시작되기 전에 실질적으로 완료되어야 합니다. 이것이 폭포수 프로젝트의 핵심 아이디어입니다. 한 단계를 완료한 후 다음 단계로 넘어가면 프로젝트 작업이 일련의 단계를 따라 &quot;흐릅니다&quot;. Royce는 프로젝트 단계의 순차적 완료를 설명하기 위해 &quot;폭포수&quot;라는 용어를 사용한 적이 없지만 소프트웨어 개발에서는 폭포수 비유가 빠르게 인기를 얻었습니다.</p><p>Waterfall 프로젝트 관리는 프로젝트 및 재무 관리에서 보다 광범위하게 사용되는 방식에 잘 맞는 논리적이고 쉽게 이해되며 예측 가능한 방법을 제공하므로 복잡한 소프트웨어 및 기타 여러 종류의 프로젝트를 개발하는 데 가장 널리 사용되는 프로세스가 되었습니다. Royce를 포함한 모든 사람이 엄격한 폭포수 프로세스의 잠재적인 단점을 인정하지만 이는 매우 복잡한 프로젝트를 처리하기 위한 강력하고 직관적인 단계별 로드맵을 제공합니다. 단순하지만 확고한 논리는 폭포수 방법의 지속적인 인기를 뒷받침합니다.</p><p>Waterfall 프로젝트 관리는 활성 사이트를 구축하거나 기능을 코딩하기 전에 광범위한 연구와 사용자 요구 사항 분석을 잘 수행해야 하는 콘텐츠 집약적 웹 프로젝트와 같은 프로젝트에 매우 적합할 수 있습니다. 대부분의 웹 디자인 회사가 대규모 사이트를 생성하거나 수정하기 위한 제안을 처리하는 방법을 자세히 살펴보면 아래에 설명된 &quot;민첩한&quot; 기술보다는 전통적인 폭포수 프로젝트 관리와 훨씬 유사한 프로세스 및 프로젝트 단계를 볼 수 있습니다. 부분적으로 이는 대부분의 내부 프로젝트와 공급업체 계약 담당자가 폭포식 접근 방식을 기대하는 대기업과 협력하는 서비스 비즈니스를 운영하는 현실입니다. 그러나 디자인 및 기술 회사도 폭포식 작업 순서를 사용합니다. 왜냐하면 많은 프로젝트에서 실질적인 프로그래밍이나 웹 사이트 개발이 논리적으로 진행되기 전에 복잡하거나 광범위한 요구 사항, 디자인 및 콘텐츠 생성 단계가 필요하기 때문입니다. 요즘 대부분의 폭포수 프로젝트는 설계가 훨씬 더 유연하여 여러 동시(순차 대신) 프로젝트 스레드를 허용하고 최신 민첩한 기술에서 빌린 반복적인 설계-구축-분석-개선 주기를 허용합니다.</p><p>폭포수 프로젝트 관리는 복잡한 소프트웨어 프로젝트를 처리하기 위해 프로그래머에 의해 만들어졌지만, 소프트웨어 개발과 웹 사이트 개발이 엄격한 폭포수 방법에 가장 적합하지 않은 용도 중 하나일 수 있다는 점은 아이러니합니다. 세부 사항이 요구 사항 및 설계 단계에서 제시된 계획에서 거의 항상 벗어나는 플라스틱 프로세스입니다. 변화에 영향을 받지 않는 것은 없으며, 시간이 지나도 발전하지 않는 폭포수 프로젝트는 없습니다. 따라서 프로젝트 초기에 작성된 요구 사항 문서는 점차적으로(때로는 빠르게) 쓸모없고 관련성이 없게 됩니다. 간과된 문제, 제대로 문서화되지 않은 프로세스, 제대로 구상되지 않은 디자인은 항상 존재하며, 이는 문제를 더 잘 이해하는 프로젝트의 후반 단계에서 분명해집니다. 그리고 모든 복잡한 프로젝트는 소프트웨어 설계에 영향을 미치기 위해 거의 매일 새로운 아이디어가 등장하는 학습 과정이기도 합니다. 일반적으로 사용되는 하드웨어, 운영 체제, 기타 응용 프로그램, 리더십, 스폰서 및 사용자 비즈니스 목표가 끊임없이 변화하여 원래 요구 사항과 설계 문서는 작성되고 승인되자마자 거의 쓸모없게 될 가능성이 있습니다.</p><p>고전적인 폭포수 프로젝트 관리 기술은 지나치게 길고 상세한 문서 및 요구 사항 단계로 인해 산더미 같은 서류 작업, 정교한 시각적 디자인 렌더링, 지나치게 세부적인 요구 사항 및 프로세스 차트가 생성되어 일단 건물이 완성되면 빠르게 숨막히는 구속복이 되는 &quot;분석 마비&quot;로 어려움을 겪었습니다. 프로젝트 단계가 시작됩니다. 또는 프로젝트에 참여하는 누군가가 실제로 문서를 읽었다면 그럴 수도 있지만, 그렇지 않은 경우가 많습니다. 기업은 어리석기 때문에 복잡한 디자인 문서를 작성하지 않습니다. 전통적인 폭포식 관리에서 흔히 볼 수 있는 광범위한 문서화 요구 사항은 두 가지 중요한 작업을 수행하려는 시도를 반영합니다. 첫째, 철저하고 문서화된 연구 및 요구 사항 단계를 통해 프로젝트 위험을 줄입니다. 둘째, 많은 관리자와 이해관계자가 있는 대규모 프로젝트 팀과 소통하는 것입니다. 불행하게도, 엄청난 양의 서류 작업으로는 두 가지 목표를 모두 달성하는 경우가 거의 없습니다.</p><p>사이트 개발자의 관점에서 엄격한 요구 사항과 디자인 단계는 프로젝트가 달성해야 하는 것에 대한 아이디어 변화의 나쁜 측면을 처리하는 방법입니다. 일반적으로 예산 및 일정에 대한 변경 사항을 일치시키지 않고 프로젝트 결과물에 추가됩니다. 프로젝트에 많은 추가 작업을 수용할 수 있는 시간과 돈이 있더라도 추가된 모든 &quot;기능&quot;으로 인해 유지 관리가 어렵고 실제 사용자 문제를 해결하지 못하는 복잡하고 불필요한 코드가 생성되기 때문에 많은 프로젝트가 실패합니다. 연구에 따르면 소프트웨어 &quot;기능&quot;의 무려 3분의 2가 전혀 또는 거의 사용되지 않는 것으로 나타났습니다.</p><h2 id="_2-애자일-프로젝트-관리" tabindex="-1">2. 애자일 프로젝트 관리 <a class="header-anchor" href="#_2-애자일-프로젝트-관리" aria-label="Permalink to &quot;2. 애자일 프로젝트 관리&quot;">​</a></h2><p>모든 프로젝트에서 나타나는 두 가지 요소(소프트웨어 개발 현실의 유동성과 사전 계획된 설계 요구 사항 세트의 경직성) 사이의 긴장으로 인해 논리적인 계획 단계가 필요하지만, 견고한 프로세스는 변화하는 요구 사항을 수용할 수 있을 만큼 유연해야 합니다.</p><p>2001년 소프트웨어 개발자 그룹이 복잡한 소프트웨어 프로젝트를 개발하기 위한 유연한 &quot;애자일&quot; 방법을 공식적으로 개발하고 홍보하기 위해 유타주 Snowbird 리조트에 모였습니다. 그 결과 애자일 선언문은 두 가지 근본적인 과제를 해결하는 전통적인 폭포식 프로젝트 관리에 대한 주요 대안의 기초가 되었습니다. 즉, 변화하는 요구 사항을 인정하고 환영하는 유연한 프로세스를 만드는 동시에 &quot;범위 변화&quot;를 억제하기 위해 기능적 우선 순위의 엄격한 계층 구조를 강조하는 것입니다. ” 덜 중요한 소프트웨어 “기능”에 대해 설명합니다.</p><p>Agile은 제대로 실행되지 않으면 유연하지 못한 목표, 일별 및 주별 우선 순위의 방황, 과도한 문서 요구 사항, 주요 정보 기술 프로젝트의 충격적인 실패율 등을 초래하는 폭포수 방식의 경직성에 대한 반응으로 탄생했습니다. 애자일 선언문은 소프트웨어나 웹 사이트의 일상적인 개발을 위한 작업 계획이 아니라 철학적 선언입니다. 다음과 같이 읽습니다.</p><p>우리는 소프트웨어를 개발하는 더 나은 방법을 직접 수행하고 다른 사람들이 수행할 수 있도록 지원함으로써 이를 발견하고 있습니다. 이 작업을 통해 우리는 다음과 같은 가치를 갖게 되었습니다.</p><ul><li>프로세스와 도구를 통한 개인과 상호작용</li><li>포괄적인 문서를 통해 작동하는 소프트웨어</li><li>계약 협상을 통한 고객 협업</li><li>계획에 따른 변경에 대한 대응</li></ul><p>즉, 오른쪽에 있는 항목에도 가치가 있지만 우리는 왼쪽에 있는 항목에 더 가치를 둡니다.(<a href="https://agilemanifesto.org/" target="_blank" rel="noreferrer">agilemanifesto.org</a>)</p><p>민첩한 프로젝트 관리 기술은 다음을 강조합니다.</p><ul><li>빡빡한 일일 또는 주간 계획-행위-검토-구현 주기를 갖춘 반복적이고 증분적인 방법입니다.</li><li>가장 중요하고 우선순위가 높은 기능과 사용자 문제에 끊임없이 집중합니다.</li><li>소규모 개발자, 클라이언트 또는 프로젝트 후원자와의 지속적인 대면 접촉 및 커뮤니케이션.</li><li>작업 소프트웨어를 신속하게 제공하여 소규모, 보다 빠른 프로젝트를 진행합니다.</li><li>실제적이고 즉각적인 사용자 문제를 해결하는 소프트웨어입니다.</li><li>주로 사용자 요청, 필요 또는 보고된 문제를 기반으로 지속적인 적응 계획과 요구 사항의 지속적인 발전을 통해 지속적인 소프트웨어 개선입니다.</li><li>공식적인 프로젝트 보고, 광범위한 소프트웨어 문서, 상세한 그래픽 계획 및 커뮤니케이션 보고서와 시각적 자료, 매우 상세한 화면 와이어프레임 또는 매우 상세한 사용자 인터페이스 사양은 무시됩니다.</li></ul><p>애자일 프로젝트의 빠른 일정과 적당한 규모는 의도적으로 계획되었습니다. 야심 찬 웹 또는 소프트웨어 계획을 상대적으로 짧은 일정으로 더 작은 덩어리로 나누는 것은 다른 프로젝트 계획 방법론과 관련된 높은 실패율을 피하려는 시도입니다.</p><p>프로젝트에 애자일 철학을 구현하기 위해 지난 10년 동안 여러 프로젝트 관리 프레임워크가 등장했으며, 그 중 가장 인기 있는 프레임워크는 &quot;스크럼&quot;입니다. &quot;스크럼&quot;이라는 용어는 팀이 일련의 짧은 개인 플레이 또는 &quot;스크럼&quot;을 통해 점진적으로 전진하는 럭비 스포츠에서 유래되었습니다. 스크럼 프로젝트 프레임워크는 상대적으로 작은 팀을 중심으로 구축되었습니다. 일반적으로 소프트웨어나 온라인 콘텐츠 프로젝트에 대해 물리적으로 가까운 거리에서 긴밀하게 협업하는 5~9명의 개인이 있습니다. 좋은 스크럼 팀은 제품과 개발 프로세스 모두의 지속적인 개선을 위해 노력하는 &quot;검사 및 조정&quot; 주기에 중점을 둡니다. 짧은 일일 &quot;스탠드업&quot; 회의에서 팀원들은 지난 날 성취한 것과 그날 무엇을 할 것인지 보고합니다.</p><p>팀 구조는 간단하며 세 가지 프로젝트 역할만 허용합니다.</p><ul><li>제품 소유자: 제품에 대한 전반적인 비전과 비즈니스 사례를 제공하고 경영진의 이익을 대표하며 제품 성공에 대한 전반적인 책임을 집니다. 수행해야 할 작업의 우선순위를 지정하고 해결해야 할 항목이나 기능의 백로그를 관리합니다.</li><li>스크럼 마스터: 숙련된 스크럼 프레임워크 사용자가 회의에서 중립적이고 지식이 풍부한 제3자 역할을 하며 팀의 프로세스 및 승인 촉진자 역할을 하는 고유한 &quot;서번트 리더십&quot; 역할입니다. 스크럼 마스터는 코치 역할을 하여 팀이 현재 가장 높은 우선 순위에 집중하고 스크럼 기술을 올바르게 적용하도록 돕습니다.</li><li>팀원: 스크럼 팀은 규모가 작고 고도로 협력적이며 일반적으로 매일 아침 약 15분 정도의 &quot;스탠드업 회의&quot;를 통해 작업 루틴의 세부 사항을 구성합니다. 팀 역할은 전문화될 수 있지만 각 팀 구성원은 전체 팀의 성공과 완제품의 품질에 대해 개별적으로 책임을 집니다. 웹 프로젝트에서 역할은 페이지 엔지니어, 프로그래머, 그래픽 디자이너, 작가, 편집자 등으로 전문화될 수 있지만 팀의 모든 사람은 기능적으로 동일하며 프로젝트의 전반적인 성공에 대한 책임을 공유합니다.</li></ul><p>스크럼 프레임워크는 몇 가지 고유한 용어를 사용하여 스크럼 프로세스의 다양한 요소를 설명합니다. 최근 스크럼과 애자일의 인기로 인해 이러한 용어는 소프트웨어 개발 및 웹 디자인의 일반 세계로 유출되고 있으므로 스크럼 용어에 대한 일반적인 이해를 갖는 것이 좋습니다.</p><ul><li>스프린트: 스크럼 프로세스의 기본 일정 단위로, 팀이 정의된 작업 세트를 수행하는 동안 1주에서 몇 주까지의 기간입니다. 스프린트는 약 한 달 정도 걸릴 수 있지만 일단 스프린트가 시작되면 합의된 스프린트 기간은 변하지 않습니다.</li><li>제품 백로그: 납품할 제품 기능이나 품목의 누적 목록입니다. 백로그는 전체 프로젝트를 다루며 관련 개별 ​​작업 세트는 여러 &quot;스프린트&quot;로 분류됩니다. 각 스프린트는 제품 백로그에서 달성할 새로운 작업 세트를 도출합니다. 팀 리더는 백로그 항목의 우선순위를 설정합니다.</li><li>스프린트 백로그: 스프린트 중에 수행할 작업 목록 또는 기능 항목입니다.</li><li>Kanban 또는 작업 보드: 일반적으로 팀 작업 영역에 있는 대형 벽걸이 화이트보드로, 팀 구성원이 언제든지 쉽게 볼 수 있습니다. 이러한 유형의 디스플레이 보드는 시각적 프로젝트 관리 도구로 Toyota에서 시작되었으며 종종 &quot;kanban&quot;(&quot;시각적 신호&quot;를 의미하는 일본어)이라고도 합니다. 작업 보드에는 일반적으로 4개의 열이 있으며, 현재 스프린트의 개별 작업 상태는 작업이 완료됨에 따라 점차 오른쪽으로 이동하는 컬러 스티커 메모로 표시됩니다. 일부 팀에서는 Jira 또는 Basecamp와 같은 프로젝트 관리 소프트웨어를 사용하여 칸반과 유사한 기능을 처리할 수 있습니다.</li><li>번다운 차트: 스프린트의 현재 상태를 표시하는 또 다른 그래픽 방법입니다. 스프린트 내의 모든 작업에 필요한 총 예상 시간은 세로 축에 있고 가로 축에는 스프린트의 총 일수가 표시됩니다. 차트는 일반적으로 예상 완료 속도와 매일 완료된 작업의 실제 상태를 나타냅니다.</li><li>스토리 또는 사용자 스토리: 애자일과 스크럼은 매우 구체적이고 실제적인 문제를 해결하는 데 중점을 두고 있으므로 작업 정의는 프로그래밍 및 사용자 인터페이스 기술에서 &quot;사용 사례 시나리오&quot;라고도 하는 &quot;사용자 스토리&quot;를 중심으로 이루어집니다. 사용자 스토리는 일반적으로 작업 제목, 사용자 역할, 사용자가 원하는 작업 및 프로세스에서 사용자가 바라는 결과가 적힌 3×5 카드 또는 스티커 메모로 표시됩니다. 사용자 스토리는 일반적으로 여러 작업으로 분류되며, 이를 위해서는 공동 작업을 위한 전문 기술(사용자 인터페이스 디자인, 그래픽 디자인, 페이지 엔지니어링, 프로그래밍)을 갖춘 다양한 팀 구성원이 필요할 수 있습니다. 팀은 공동으로 각 사용자 스토리의 크기를 조정하고 필요한 전체 기능을 수행할 구성 요소 작업으로 분해하고 각 작업을 완료하는 데 필요한 시간을 추정합니다.</li><li>작업: 스프린트 작업은 일반적으로 4~16시간 내에 완료될 것으로 예상되는 작업 단위입니다. 팀 구성원은 일반적으로 자신의 전문 기술을 기반으로 특정 작업에 자원 봉사합니다. 매일 각 작업에 남은 예상 시간을 업데이트하며 이는 스프린트 번다운 차트의 일일 상태 지점에 기여합니다.</li></ul><p>스크럼 프로젝트의 기본적인 순환 리듬은 팀 구성원이 전체 프로젝트 백로그의 하위 집합을 처리하는 고정된 기간인 스프린트를 기반으로 합니다. 스프린트의 정의에는 고정된 기간이 없습니다. 대부분의 스크럼 프로젝트는 1~4주의 스프린트로 작업하며, 1~2주의 스프린트가 가장 일반적입니다. 스프린트가 시작되면 기간이 고정되며 스프린트는 계획된 마감일 이상으로 연장되지 않습니다.</p><ul><li>스프린트 계획 회의: 이 회의에는 두 가지 목적이 있습니다. 팀 리더가 다음 스프린트에서 다룰 사용자 스토리를 제안하고, 팀원은 각 사용자 스토리를 구성 요소 작업으로 분해합니다. 그런 다음 팀은 새 스프린트 내에서 완료할 관리 가능한 수의 스토리와 작업에 대해 공동으로 최종 약속을 합니다. 이러한 계획 회의는 4시간 이상 지속되지 않습니다.</li><li>일일 스크럼 회의: 각 팀이 전날 수행한 작업, 오늘 달성할 계획, 작업 완료에 장애물이 예상되는지 여부를 보고하는 짧은(15분) 일일 이른 아침 회의입니다. 스크럼 마스터는 직원 보고서를 편집하고 스프린트 번다운 차트와 작업 보드를 업데이트합니다. 이 회의는 간결하게 보고하고 회의를 간략하게 유지하도록 모든 참가자에게 상기시키기 위해 종종 모든 참가자가 기립하여 개최됩니다. 실제로 이를 &quot;일일 스탠드업&quot;이라고도 합니다.</li><li>스프린트 검토: 일반적으로 스프린트 기간의 마지막 날에 한 시간 동안 진행되는 회의로, 스프린트 결과가 프로젝트 스폰서 및 이해관계자에게 제시됩니다. 스프린트 검토는 새로운 기능, 스폰서 및 이해 관계자의 반응과 우려 사항, 프로젝트의 현재 상태가 다음 스프린트에 미치는 영향에 중점을 둡니다.</li><li>스토리 타임: 향후 스프린트에서 고려할 사용자 스토리와 관련된 범위 및 작업을 검토하는 회의입니다. 이는 일반적으로 팀이 지금까지 배운 내용과 이것이 향후 사용자 스토리 및 스프린트를 처리하는 방식에 어떤 영향을 미칠 수 있는지 논의하기 위한 주중에 1시간짜리 계획 회의입니다.</li><li>스프린트 회고: 내부 팀 프로세스 및 커뮤니케이션의 지속적인 개선을 목표로 어떤 프로세스와 작업 예측이 잘 진행되었는지에 초점을 맞춘 팀 및 스크럼 마스터(일반적으로 제품 소유자는 아님)와의 회의입니다. 이러한 &quot;검사 및 조정&quot; 회의는 일반적으로 스프린트 마지막 날에 이루어지며 2시간 이상 지속되지 않습니다.</li></ul><p>소규모 프로젝트와 지속적인 유지 관리 및 편집 활동은 종종 칸반 보드에서 완전히 실행될 수 있으며 빈번한 팀 회의 또는 짧은 아침 스탠드업 회의로 보강됩니다. 칸반 시스템은 간단하고 눈에 잘 띄며 공통 영역에서 작업하는 팀에 이상적인 경우가 많습니다. 같은 위치에 있지 않은 팀은 Jira 또는 Basecamp와 같은 프로젝트 소프트웨어를 사용하여 온라인으로 &quot;가상&quot; 칸반 보드를 만들 수 있습니다.</p><p>모든 프로젝트 관리 프레임워크(폭포식 또는 애자일/스크럼)는 구성 요소 프로세스를 얼마나 잘 이해하고 실행하는지에 따라 달라집니다. 유연성을 강조하는 스크럼은 팀과 리더십이 작업에 대한 예측이 정확하지 않고 잠재적인 사용자 스토리와 작업을 가장 중요한 요소로만 축소하는 데 충분히 무자비하지 않은 경우 수렁에 빠지는 프로젝트로 이어질 수 있습니다. 회전은 계획된 스프린트 내에 실제로 적합할 수 있습니다. 부정확한 추정과 사용자 스토리 및 작업 변경의 유연성이 너무 높기 때문에 스크럼 기반 프로젝트는 폭포 중심 프로젝트만큼 예산 및 일정 문제에 취약할 수 있습니다. 그러나 연구에 따르면 스크럼 기술은 소프트웨어 및 웹 프로젝트에 매우 적합하며 전통적인 폭포수 기술로 관리되는 프로젝트보다 전반적인 성공률이 훨씬 더 높습니다.</p><p>비교적 소규모 팀과 단기 프로젝트에 대한 스크럼의 강조는 그에 상응하는 대규모 팀이 있는 대규모 장기 프로젝트를 관리하는 데 적합하지 않을 수 있습니다. 소규모의 짧은 일일 및 주간 회의의 강렬한 팀 커뮤니케이션 기술은 훨씬 더 큰 팀(20명 이상)으로 쉽게 확장되지 않습니다. 하지만 스크럼 프로세스를 더 큰 프로젝트의 일부 구성 요소에 적용하거나 대규모 프로젝트를 여러 그룹으로 세분화하는 것이 가능한 경우가 많습니다. 스크럼 프레임워크를 통해 관리되는 더 작은 시퀀스.</p><p>민첩한 프로젝트는 응집력 부족으로 어려움을 겪을 수 있습니다. 모든 사용자 스토리는 나무이고, 모든 작업은 또 다른 잎사귀가 되며, 팀은 숲이 어떻게 형성되어 있는지를 망각할 수 있습니다. 빠른 속도로 개발된 작업 소프트웨어의 빠른 제공에 대한 강조는 사용자 및 비즈니스 프로세스 연구, 사용자 인터페이스 일관성, 사이트 콘텐츠 및 메시징 전략과 같은 전체적인 요소가 부족해질 수 있는 &quot;조준 준비&quot; 증후군으로 이어질 수도 있습니다. Agile 프로젝트의 초기 스프린트에서 시간을 단축합니다. 콘텐츠 편집자와 디자이너 모두 개발 팀에 참여하고 모든 회의에 참여하여 콘텐츠와 메시지의 연속성을 보장하는 것이 중요합니다. 사용자 연구, 인터페이스 개발 및 와이어프레임, 핵심 시각적 디자인 접근 방식은 성공적인 사이트의 기본 아키텍처이며, 디자인 및 사용성 커뮤니티가 민첩한 개발의 가속화된 일정을 수용하기 위해 빠르게 변화하고 있지만 항상 짧은 스프린트에 적합한 것은 아닙니다.</p><p>기능적 코드와 페이지를 가능한 한 빨리 구축하는 데 중점을 두는 것은 모호하거나 잘 이해되지 않는 세부 사항과 기능적 요구 사항이 많은 더 큰 &quot;사악한 문제&quot;를 희생하면서 가볍고 쉽게 해결되는 문제에 대한 편견을 초래할 수 있습니다. 작고 쉬운 일이 현재 해야 할 가장 중요한 일이기 때문이 아니라 스프린트 프레임워크에 잘 들어맞기 때문에 항상 하고 싶은 유혹이 있습니다. 민첩한 팀은 어려운 문제가 계속해서 이후 스프린트로 이동되는 &quot;수평선 효과&quot;(&quot;깡통 걷어차기&quot;라고도 함)로 인해 어려움을 겪을 수 있습니다. 다시 스프린트로 밀어넣어도 문제가 해결되지 않습니다.</p><h2 id="_3-하이브리드-워터폴-애자일-프로젝트-관리" tabindex="-1">3. 하이브리드 워터폴/애자일 프로젝트 관리 <a class="header-anchor" href="#_3-하이브리드-워터폴-애자일-프로젝트-관리" aria-label="Permalink to &quot;3. 하이브리드 워터폴/애자일 프로젝트 관리&quot;">​</a></h2><p>많은 조직에서는 워터폴 기술의 초기 요구 사항 및 설계 계획 측면을 사용한 다음 스크럼 기술을 사용하여 소프트웨어 또는 웹 사이트의 구축 및 품질 관리를 관리하는 워터폴 및 애자일 프로젝트 관리의 하이브리드를 사용합니다. 모든 프로젝트 관리 기술에서 널리 받아들여지는 애자일의 교훈은 소프트웨어 및 웹 개발 프로젝트가 개발 프로세스의 지속적인 개선을 위한 유연성과 반복적 접근 방식을 허용해야 하며, 대규모 프로젝트를 보다 관리하기 쉬운 덩어리로 세분화하면 훨씬 더 높은 생산성을 얻을 수 있다는 것입니다. 성공률은 특히 소규모 프로젝트가 민첩한 기술로 관리될 때 더욱 그렇습니다. 또한 하이브리드 시스템은 이 장의 간트 차트에 표시된 것처럼 초기 프로젝트 단계에서 콘텐츠 연구 및 전략, 기능 요구 사항 및 기술 계획이 동시에 발생하는 더 많은 동시 프로젝트 개발 스레드를 허용합니다.</p><p>많은 스크럼 프로젝트에서는 팀이 적극적인 코드 작성 및 사이트 구축을 시작하기 전에 기본 프로젝트 프로세스, 비즈니스 및 연구 문제를 해결하는 &quot;스프린트 제로&quot; 기간을 설정합니다. 스프린트 제로 기간은 때때로 &quot;변장된 폭포수&quot;로 비판을 받지만 초기 요구 사항 수집, 사용자 연구, 기본 인터페이스 및 와이어프레임 접근 방식의 폭포수 방법의 강점은 이후 구축 단계의 스크럼 프로세스와 성공적으로 결합될 수 있습니다. 프로젝트의. 성공적인 하이브리드 접근 방식의 핵심은 긴 요구 사항과 설계 기간을 피하고 폭포수 프로젝트의 초기 단계를 종종 괴롭히는 과도한 문서 결과물을 피하는 것입니다.</p>',36),u=[e];function p(q,r,n,c,s,_){return i(),o("div",null,u)}const f=t(a,[["render",p]]);export{d as __pageData,f as default};
